<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.idp.web.zcstock.dao.ZcStockDao">

	<parameterMap id="parameterMap" type="com.idp.web.zcstock.entity.ZcStock"></parameterMap>
	<resultMap id="resultMap" type="com.idp.web.zcstock.entity.ZcStock">
		<result property="id" column="id"/>
		<result property="proCode" column="pro_code"/>
		<result property="proName" column="pro_name"/>
		<result property="proSpacname" column="pro_spacname"/>
		<result property="proPrice" column="pro_price"/>
		<result property="proDiscount" column="pro_discount"/>
	</resultMap>
	
	<sql id="columnSql">
		select
			<trim suffixOverrides=",">
				t.id,
				t.pro_code,
				t.pro_name,
				t.pro_spacname,
				t.pro_price,
				t.pro_discount,
		 	</trim>
		from zc_stock t
	</sql>
	
	<select id="find" parameterMap="parameterMap" resultMap="resultMap">
		<include refid="columnSql"></include>
		<where>
			<if test="proCode != null and proCode != ''">
				t.pro_code like CONCAT('%','${proCode}','%' )  
			</if>
			<if test="proName != null and proName != ''">
				t.pro_name   like CONCAT('%','${proName}','%' )  
			</if>
			<if test="proSpacname != null and proSpacname != ''">
			 	t.pro_spacname  like CONCAT('%','${proSpacname}','%' )  
			</if>
			<if test="proPrice != null and proPrice != ''">
			 	t.pro_price = #{proPrice}
			</if>
			<if test="proDiscount != null and proDiscount != ''">
				t.pro_discount = #{proDiscount}
			</if>
		</where>
	</select>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="resultMap">
		<include refid="columnSql"></include>
		where id = #{value}
	</select>
	
	<insert id="add" parameterMap="parameterMap">
		insert into zc_stock
		<trim prefix="(" suffix=")" suffixOverrides=",">
			pro_code,
			pro_name,
			pro_spacname,
			pro_price,
			pro_discount,
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{proCode},
			#{proName},
			#{proSpacname},
			#{proPrice},
			#{proDiscount},
		</trim>
	</insert>
	
	<insert id="batchAdd" parameterType="java.util.List">
		insert into zc_stock
		<trim prefix="(" suffix=")" suffixOverrides=",">
			pro_code,
			pro_name,
			pro_spacname,
			pro_price,
			pro_discount,
		</trim>
		values
		<foreach collection="list" item="item" separator=",">
			<trim prefix="(" suffix=")" suffixOverrides=",">
				#{item.proCode},
				#{item.proName},
				#{item.proSpacname},
				#{item.proPrice},
				#{item.proDiscount},
			</trim>
		</foreach>
	</insert>
	
	<update id="update" parameterMap="parameterMap">
		update zc_stock
		<set>
			pro_code = #{proCode},
			pro_name = #{proName},
			pro_spacname = #{proSpacname},
			pro_price = #{proPrice},
			pro_discount = #{proDiscount},
		</set>
		where id = #{id}
	</update>
	
	<update id="updateNotNull" parameterMap="parameterMap">
		update zc_stock
		<set>
			<if test="proCode != null">
			pro_code = #{proCode},
			</if>
			<if test="proName != null">
			pro_name = #{proName},
			</if>
			<if test="proSpacname != null">
			pro_spacname = #{proSpacname},
			</if>
			<if test="proPrice != null">
			pro_price = #{proPrice},
			</if>
			<if test="proDiscount != null">
			pro_discount = #{proDiscount},
			</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete" parameterType="java.lang.Long">
		delete from zc_stock where id = #{value}
	</delete>
	
	<delete id="batchDelete" parameterType="java.util.List">
		delete from zc_stock where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>
	
</mapper>